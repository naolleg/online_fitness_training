// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Admin {
  id       Int   @default(autoincrement()) @id
  fname    String
  lname    String
  username String
  email    String   @unique
  password String
  users    User[]
  quiz Quiz[]
}

model User {
  id       Int  @default(autoincrement()) @id
  fname    String
  lname    String
  email    String   @unique
  password String
  imageurl String?
  role     Role     @default(Trainee)
  gender   Gender?
  age      Int?
  status   Status?
  admin    Admin?   @relation(fields: [id], references: [id])
  trainer  Trainer?
  trainee  Trainee?
  addresses Address[]
  message  Message[]
  chats     Chat[]
  notifications Notification[]
}

enum Role {
  Admin
  Trainer
  Trainee
}

enum Gender {
  Male
  Female
  Other
}

enum Status {
  Active
  Inactive
}

model Trainer {
  id           Int   @default(autoincrement()) @id
  user         User     @relation(fields: [id], references: [id])
  certification String
  specialization String
  profile_photo String
  introduction_video String
  schedules Schedule[]
  progress Progress[]
  training Training[]
}

model Trainee {
  id         Int   @default(autoincrement()) @id
  user       User     @relation(fields: [id], references: [id])
  trainee_status TraineeStatus[]
  schedules Schedule[]
  progress Progress[]
  training Training[]
  mealplan MealPlan[]
}

model TraineeStatus {
  id         Int @id @default(autoincrement())
  traineeid   Int
  height     Float
  weight     Float
  allergies  String
  medical_conditions String
  medications String
   trainee    Trainee  @relation(fields: [traineeid], references: [id])
}

model Training {
  id         Int   @default(autoincrement()) @id
  traineeid   Int
  trainerid   Int
  start_date DateTime
  end_date   DateTime
  categories String
  trainee    Trainee  @relation(fields: [traineeid], references: [id])
  trainer    Trainer  @relation(fields: [trainerid], references: [id])
}

model Address {
  id     Int  @default(autoincrement()) @id
  city   String
  region String
  user   User     @relation(fields: [id], references: [id])
}

model Schedule {
 id Int @id @default(autoincrement())
 trainerid Int
 traineeid Int
  created_date DateTime
  schedule_date DateTime
  workout_plan WorkoutPlan[]
    trainer    Trainer  @relation(fields: [trainerid], references: [id])
  trainee    Trainee  @relation(fields: [traineeid], references: [id])
}

model WorkoutPlan {
 id Int @id @default(autoincrement())
  name       String
  description String
  exercises Exercise[]
  schedules Schedule[]
}

model Exercise {
 id Int @id @default(autoincrement())
  name       String
  description String
  benefits    String
  how_to_guide String
  workout_plans WorkoutPlan[]
}

model MealPlan {
 id Int @id @default(autoincrement())
 traineeid  Int
  trainee    Trainee  @relation(fields: [traineeid], references: [id])
  meal_plan_data String
}

model Quiz {
  id       Int   @default(autoincrement()) @id
  adminid   Int
  question String

 admin    Admin    @relation(fields: [adminid], references: [id])
 }

model Progress {
 id Int @id @default(autoincrement())
  trainerid Int
 traineeid Int
  progress_rate Float
  progress_data String
  trainer    Trainer  @relation(fields: [trainerid], references: [id])
  trainee    Trainee  @relation(fields: [traineeid], references: [id])
}

model Chat {
 id Int @id @default(autoincrement())
  userid Int
  name       String
  isGroup    Boolean
  lastMessageId String
  createdAt  DateTime
  messages   Message[]
  user      User?   @relation(fields: [userid], references: [id])
}

model Message {
  id       Int  @default(autoincrement()) @id
  chatid   Int
  content  String
  sentTime DateTime
  seen     Boolean
  attachments MessageAttachment[]
   chat     Chat     @relation(fields: [chatid], references: [id])
   sender   User     @relation(fields: [id], references: [id])
}

model MessageAttachment {
  id       Int   @default(autoincrement()) @id
  url      String
  message  Message  @relation(fields: [id], references: [id])
}

model Notification {
  id       Int   @default(autoincrement()) @id
  user     User     @relation(fields: [id], references: [id])
  message  String
  createdAt  DateTime
  seen     Boolean
}